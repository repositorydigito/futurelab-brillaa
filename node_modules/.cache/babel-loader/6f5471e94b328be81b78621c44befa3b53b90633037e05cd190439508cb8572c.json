{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp\\\\www\\\\Cafe-Taipa\\\\src\\\\components\\\\chatbot\\\\chatbot2\\\\chatbot2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { sendChatRequest } from \"../../../services/apiService\";\nimport { TEXTS } from \"../../../constants/textConstants\";\nimport { setValueBrandStrategy } from \"../../../redux/slices/threadSlice\";\nimport { trackEvent } from \"../../../services/bffLeadClient\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot2 = () => {\n  _s();\n  var _location$state;\n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [botMessageCount, setBotMessageCount] = useState(0);\n  const [errorCount, setErrorCount] = useState(0);\n  const [isInteractionComplete, setIsInteractionComplete] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const cuestionarioBotResponse = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.cuestionarioResponse; // Respuesta del Cuestionario\n  const threadId = useSelector(state => state.thread.threadId); // Obtener el thread_id desde Redux\n  const leadId = localStorage.getItem('leadId');\n  const maxInteractions = parseInt(process.env.REACT_APP_MAX_INTERACTIONS_CHATBOT, 10) || 3;\n  // Mostrar el mensaje del bot al cargar el componente\n  useEffect(() => {\n    setMessages([{\n      id: 1,\n      text: cuestionarioBotResponse || \"¡Hola! Continuemos construyendo tu estrategia. ¿Cómo puedo ayudarte?\",\n      sender: \"bot\"\n    }]);\n  }, [cuestionarioBotResponse]);\n  const handleSend = async () => {\n    if (inputValue.trim() !== \"\" && !isInteractionComplete) {\n      // Agregar el mensaje del usuario\n      const newMessage = {\n        id: messages.length + 1,\n        text: inputValue,\n        sender: \"user\"\n      };\n      setMessages([...messages, newMessage]);\n\n      // Preparar mensaje a enviar al backend\n      const isFinalInteraction = botMessageCount + 1 === 3;\n      const complementaryMessage = isFinalInteraction ? `Esta es la última interacción: \"${inputValue}\". Ten en cuenta todas las preguntas y respuestas de INSUMO y CONTEXTO proporcionadas anteriormente y genera un cierre para esta estrategia. ` : `Esta es la respuesta: \"${inputValue}\". Responde siempre con otra versión del entregable de estrategia de marca, que incluya lo que el usuario dice en la respuesta.`;\n      setInputValue(\"\");\n      try {\n        // Enviar el mensaje al backend\n        const botResponse = await sendChatAgent2Request(complementaryMessage, threadId);\n        if (!isFinalInteraction) {\n          // Mostrar la respuesta del bot solo si no es la última interacción\n          setMessages(prevMessages => [...prevMessages, {\n            id: prevMessages.length + 1,\n            text: botResponse.response,\n            sender: \"bot\"\n          }]);\n        }\n        const newBotMessageCount = botMessageCount + 1;\n        setBotMessageCount(newBotMessageCount);\n\n        // Si es la última interacción, agregar el mensaje final\n        if (isFinalInteraction) {\n          // Guardamos la estrategia generada\n          dispatch(setValueBrandStrategy(botResponse.response));\n          setMessages(prevMessages => [...prevMessages, {\n            id: prevMessages.length + 1,\n            text: \"Haz click en continuar para generar tu estrategia de marca.\",\n            sender: \"bot\"\n          }]);\n          setIsInteractionComplete(true); // Bloquear nuevas interacciones\n        }\n\n        // Reiniciar contador de errores en caso de éxito\n        setErrorCount(0);\n      } catch (error) {\n        console.error(\"Error al comunicarse con el bot:\", error);\n        setErrorCount(prevErrorCount => prevErrorCount + 1);\n\n        // Mostrar mensaje de error\n        setMessages(prevMessages => [...prevMessages, {\n          id: prevMessages.length + 1,\n          text: errorCount < 2 ? \"Hubo un error al obtener la respuesta del bot. Por favor, intenta nuevamente.\" : \"Ha ocurrido un error varias veces. Por favor, continúa al siguiente paso.\",\n          sender: \"bot\"\n        }]);\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n  const handleContinue = async () => {\n    try {\n      // Realizar la llamada a trackEvent\n      await trackEvent(\"evt_estrategiaMarca\", leadId, {\n        page: \"EstrategiaMarca\",\n        action: \"Access\"\n      });\n      navigate(\"/estrategia\");\n    } catch (error) {\n      console.error(\"Error al registrar el evento:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-100 min-h-screen flex flex-col items-center justify-start\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-custom-blue-gradient w-full py-4 text-center shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-yellow-400 text-4xl font-bold\",\n        children: \"Generador de Estrategia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white\",\n        children: \"Conversa con el asistente para mejorar tu Estrategia\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-24 bg-white w-full max-w-4xl rounded-lg shadow-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-200 px-4 py-2 rounded-t-lg border-b border-gray-300\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center text-2xl m-2 font-bold\",\n          children: TEXTS.QUESTIONNAIRE_BOT_TITLE\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"mb-3\",\n          children: TEXTS.QUESTIONNAIRE_BOT_SUBTITLE\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 overflow-auto h-80 flex flex-col space-y-4\",\n        children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${message.sender === \"bot\" ? \"justify-start\" : \"justify-end\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `p-3 max-w-md rounded-lg shadow-md text-gray-800 text-sm ${message.sender === \"bot\" ? \"bg-gray-200\" : \"bg-blue-200\"} break-words whitespace-normal`,\n            children: message.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), message.sender === \"bot\" && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://static.vecteezy.com/system/resources/thumbnails/007/225/199/small_2x/robot-chat-bot-concept-illustration-vector.jpg\",\n            alt: \"Asistente\",\n            className: \"ml-2 w-10 h-10 rounded-full object-cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this)]\n        }, message.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center p-2 bg-white border-t border-gray-300 rounded-b-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"flex-grow px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400\",\n          placeholder: \"Escribe tu mensaje...\",\n          type: \"text\",\n          value: inputValue,\n          onChange: e => setInputValue(e.target.value),\n          onKeyDown: handleKeyPress,\n          disabled: isInteractionComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"ml-3 p-2 bg-blue-900 text-white rounded-lg hover:bg-blue-800\",\n          onClick: handleSend,\n          disabled: isInteractionComplete,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-paper-plane\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"py-4 text-center\",\n      children: !isInteractionComplete ? /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: [\"Te quedan \", maxInteractions - botMessageCount, \" interacciones para construir tu estrategia de marca.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"Has llegado al l\\xEDmite de interacciones. Haz clic en \\\"Continuar\\\" para generar tu promesa de valor.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), isInteractionComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center py-4\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"bg-blue-900 text-white border border-blue-900 rounded-lg px-4 py-2 hover:bg-white hover:text-blue-900 hover:shadow-lg transition-all duration-300 ease-in-out\",\n        onClick: handleContinue,\n        children: \"Continuar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot2, \"Zk9e9uuSWxZUj97Upmn2wuwt7ZU=\", false, function () {\n  return [useNavigate, useLocation, useDispatch, useSelector];\n});\n_c = Chatbot2;\nexport default Chatbot2;\nvar _c;\n$RefreshReg$(_c, \"Chatbot2\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","useSelector","useDispatch","sendChatRequest","TEXTS","setValueBrandStrategy","trackEvent","jsxDEV","_jsxDEV","Chatbot2","_s","_location$state","messages","setMessages","inputValue","setInputValue","botMessageCount","setBotMessageCount","errorCount","setErrorCount","isInteractionComplete","setIsInteractionComplete","navigate","location","dispatch","cuestionarioBotResponse","state","cuestionarioResponse","threadId","thread","leadId","localStorage","getItem","maxInteractions","parseInt","process","env","REACT_APP_MAX_INTERACTIONS_CHATBOT","id","text","sender","handleSend","trim","newMessage","length","isFinalInteraction","complementaryMessage","botResponse","sendChatAgent2Request","prevMessages","response","newBotMessageCount","error","console","prevErrorCount","handleKeyPress","e","key","preventDefault","handleContinue","page","action","className","children","fileName","_jsxFileName","lineNumber","columnNumber","QUESTIONNAIRE_BOT_TITLE","QUESTIONNAIRE_BOT_SUBTITLE","map","message","src","alt","placeholder","type","value","onChange","target","onKeyDown","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/wamp/www/Cafe-Taipa/src/components/chatbot/chatbot2/chatbot2.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { sendChatRequest } from \"../../../services/apiService\";\r\nimport { TEXTS } from \"../../../constants/textConstants\";\r\nimport { setValueBrandStrategy } from \"../../../redux/slices/threadSlice\";\r\nimport { trackEvent  } from \"../../../services/bffLeadClient\";\r\n\r\nconst Chatbot2 = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [botMessageCount, setBotMessageCount] = useState(0);\r\n  const [errorCount, setErrorCount] = useState(0);\r\n  const [isInteractionComplete, setIsInteractionComplete] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n  const cuestionarioBotResponse = location.state?.cuestionarioResponse; // Respuesta del Cuestionario\r\n  const threadId = useSelector((state) => state.thread.threadId); // Obtener el thread_id desde Redux\r\n  const leadId = localStorage.getItem('leadId'); \r\n\r\n  const maxInteractions = parseInt(process.env.REACT_APP_MAX_INTERACTIONS_CHATBOT, 10) || 3; \r\n  // Mostrar el mensaje del bot al cargar el componente\r\n  useEffect(() => {\r\n    setMessages([\r\n      {\r\n        id: 1,\r\n        text: cuestionarioBotResponse || \"¡Hola! Continuemos construyendo tu estrategia. ¿Cómo puedo ayudarte?\",\r\n        sender: \"bot\",\r\n      },\r\n    ]);\r\n  }, [cuestionarioBotResponse]);\r\n\r\n  const handleSend = async () => {\r\n    if (inputValue.trim() !== \"\" && !isInteractionComplete) {\r\n      // Agregar el mensaje del usuario\r\n      const newMessage = { id: messages.length + 1, text: inputValue, sender: \"user\" };\r\n      setMessages([...messages, newMessage]);\r\n     \r\n      // Preparar mensaje a enviar al backend\r\n      const isFinalInteraction = botMessageCount + 1 === 3;\r\n      const complementaryMessage = isFinalInteraction\r\n        ? `Esta es la última interacción: \"${inputValue}\". Ten en cuenta todas las preguntas y respuestas de INSUMO y CONTEXTO proporcionadas anteriormente y genera un cierre para esta estrategia. `\r\n        : `Esta es la respuesta: \"${inputValue}\". Responde siempre con otra versión del entregable de estrategia de marca, que incluya lo que el usuario dice en la respuesta.`\r\n      setInputValue(\"\");\r\n\r\n      try {\r\n         // Enviar el mensaje al backend\r\n        const botResponse = await sendChatAgent2Request(complementaryMessage, threadId);\r\n\r\n        if (!isFinalInteraction) {\r\n          // Mostrar la respuesta del bot solo si no es la última interacción\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { id: prevMessages.length + 1, text: botResponse.response, sender: \"bot\" },\r\n          ]);\r\n        }\r\n\r\n        const newBotMessageCount = botMessageCount + 1;\r\n        setBotMessageCount(newBotMessageCount);\r\n\r\n       // Si es la última interacción, agregar el mensaje final\r\n        if (isFinalInteraction) {\r\n          // Guardamos la estrategia generada\r\n          dispatch(setValueBrandStrategy(botResponse.response));\r\n          setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            {\r\n              id: prevMessages.length + 1,\r\n              text: \"Haz click en continuar para generar tu estrategia de marca.\",\r\n              sender: \"bot\",\r\n            },\r\n          ]);\r\n          setIsInteractionComplete(true); // Bloquear nuevas interacciones\r\n        }\r\n\r\n        // Reiniciar contador de errores en caso de éxito\r\n        setErrorCount(0);\r\n      } catch (error) {\r\n        console.error(\"Error al comunicarse con el bot:\", error);\r\n        setErrorCount((prevErrorCount) => prevErrorCount + 1);\r\n\r\n        // Mostrar mensaje de error\r\n        setMessages((prevMessages) => [\r\n          ...prevMessages,\r\n          {\r\n            id: prevMessages.length + 1,\r\n            text: errorCount < 2\r\n              ? \"Hubo un error al obtener la respuesta del bot. Por favor, intenta nuevamente.\"\r\n              : \"Ha ocurrido un error varias veces. Por favor, continúa al siguiente paso.\",\r\n            sender: \"bot\",\r\n          },\r\n        ]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      e.preventDefault();\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  const handleContinue = async () => {\r\n    try {\r\n      // Realizar la llamada a trackEvent\r\n      await trackEvent(\"evt_estrategiaMarca\", leadId, {\r\n        page: \"EstrategiaMarca\",\r\n        action: \"Access\",\r\n      });\r\n\r\n      navigate(\"/estrategia\");\r\n    } catch (error) {\r\n      console.error(\"Error al registrar el evento:\", error);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"bg-gray-100 min-h-screen flex flex-col items-center justify-start\">\r\n      <div className=\"bg-custom-blue-gradient w-full py-4 text-center shadow-lg\">\r\n        <h1 className=\"text-yellow-400 text-4xl font-bold\">Generador de Estrategia</h1>\r\n        <p className=\"text-white\">\r\n          Conversa con el asistente para mejorar tu Estrategia\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"mt-24 bg-white w-full max-w-4xl rounded-lg shadow-lg\">\r\n        <div className=\"bg-gray-200 px-4 py-2 rounded-t-lg border-b border-gray-300\">\r\n          <h1 className=\"text-center text-2xl m-2 font-bold\">{TEXTS.QUESTIONNAIRE_BOT_TITLE}</h1>\r\n          <h3 className=\"mb-3\">{TEXTS.QUESTIONNAIRE_BOT_SUBTITLE}</h3>\r\n        </div>\r\n\r\n        <div className=\"p-4 overflow-auto h-80 flex flex-col space-y-4\">\r\n          {messages.map((message) => (\r\n            <div\r\n              key={message.id}\r\n              className={`flex ${message.sender === \"bot\" ? \"justify-start\" : \"justify-end\"}`}\r\n            >\r\n              <div\r\n                className={`p-3 max-w-md rounded-lg shadow-md text-gray-800 text-sm ${\r\n                  message.sender === \"bot\" ? \"bg-gray-200\" : \"bg-blue-200\"\r\n                } break-words whitespace-normal`}\r\n              >\r\n                {message.text}\r\n              </div>\r\n              {message.sender === \"bot\" && (\r\n                <img\r\n                  src=\"https://static.vecteezy.com/system/resources/thumbnails/007/225/199/small_2x/robot-chat-bot-concept-illustration-vector.jpg\"\r\n                  alt=\"Asistente\"\r\n                  className=\"ml-2 w-10 h-10 rounded-full object-cover\"\r\n                />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"flex items-center p-2 bg-white border-t border-gray-300 rounded-b-lg\">\r\n          <input\r\n            className=\"flex-grow px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n            placeholder=\"Escribe tu mensaje...\"\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={(e) => setInputValue(e.target.value)}\r\n            onKeyDown={handleKeyPress}\r\n            disabled={isInteractionComplete}\r\n          />\r\n          <button\r\n            className=\"ml-3 p-2 bg-blue-900 text-white rounded-lg hover:bg-blue-800\"\r\n            onClick={handleSend}\r\n            disabled={isInteractionComplete}\r\n          >\r\n            <i className=\"fas fa-paper-plane\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"py-4 text-center\">\r\n        {!isInteractionComplete ? (\r\n          <p className=\"text-gray-600\">\r\n            Te quedan {maxInteractions - botMessageCount} interacciones para construir tu estrategia de marca.\r\n          </p>\r\n        ) : (\r\n          <p className=\"text-gray-600\">\r\n            Has llegado al límite de interacciones. Haz clic en \"Continuar\" para generar tu promesa de valor.\r\n          </p>\r\n        )}\r\n      </div>\r\n\r\n      {isInteractionComplete && (\r\n        <div className=\"flex justify-center py-4\">\r\n          <button\r\n            className=\"bg-blue-900 text-white border border-blue-900 rounded-lg px-4 py-2 hover:bg-white hover:text-blue-900 hover:shadow-lg transition-all duration-300 ease-in-out\"\r\n            onClick={handleContinue} \r\n          >\r\n            Continuar\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot2;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}