{"ast":null,"code":"import axios from 'axios';\nconst bffLeadClient = axios.create({\n  baseURL: process.env.REACT_APP_API_BFF_LEAD,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nbffLeadClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API; // Cambiar a false cuando la API esté lista!!!!\nconst organizationId = process.env.REACT_APP_ORGANIZATION_ID;\nexport const registerUser = async (name, email, passcode = null) => {\n  if (USE_MOCK_API) {\n    // Mockea la respuesta\n    await new Promise(resolve => setTimeout(resolve, 500));\n    return {\n      token: \"mocked-token-12345\",\n      lead_id: \"mocked-lead-id-67890\",\n      organization_id: process.env.REACT_APP_ORGANIZATION_ID\n    };\n  }\n\n  // Llamada real a la API\n  try {\n    const requestBody = {\n      name,\n      email,\n      organization_id: organizationId,\n      ...(passcode && {\n        passcode\n      })\n    };\n    const response = await bffLeadClient.post('/lead_auth', requestBody);\n    return response.data; // Devuelve token, lead_id, organization_id\n  } catch (error) {\n    console.error(\"Error en registerUser:\", error);\n    throw error;\n  }\n};\nexport const trackEvent = async (eventId, leadId, eventData = {}) => {\n  if (USE_MOCK_API) {\n    // Mockea la respuesta\n    await new Promise(resolve => setTimeout(resolve, 500));\n    console.log(\"Evento registrado en modo mock:\", {\n      eventId,\n      leadId,\n      eventData\n    });\n    return {\n      message: \"Mocked event registered successfully\"\n    };\n  }\n\n  // Llamada real a la API\n  try {\n    const requestBody = {\n      event_id: eventId,\n      lead_id: leadId,\n      organization_id: organizationId,\n      data: eventData\n    };\n    const response = await bffLeadClient.post('/v1/event', requestBody);\n    return response.data; // Devuelve la respuesta de la API\n  } catch (error) {\n    console.error(\"Error en trackEvent:\", error);\n    throw error;\n  }\n};\nexport default bffLeadClient;","map":{"version":3,"names":["axios","bffLeadClient","create","baseURL","process","env","REACT_APP_API_BFF_LEAD","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","USE_MOCK_API","REACT_APP_USE_MOCK_API","organizationId","REACT_APP_ORGANIZATION_ID","registerUser","name","email","passcode","Promise","resolve","setTimeout","lead_id","organization_id","requestBody","response","post","data","error","console","trackEvent","eventId","leadId","eventData","log","message","event_id"],"sources":["C:/wamp/www/Cafe-Taipa/src/services/bffLeadClient.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst bffLeadClient = axios.create({\r\n  baseURL: process.env.REACT_APP_API_BFF_LEAD,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nbffLeadClient.interceptors.request.use((config) => {\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n});\r\n\r\nconst USE_MOCK_API = process.env.REACT_APP_USE_MOCK_API; // Cambiar a false cuando la API esté lista!!!!\r\nconst organizationId = process.env.REACT_APP_ORGANIZATION_ID;\r\n\r\nexport const registerUser = async (name, email, passcode = null) => {\r\n  if (USE_MOCK_API) {\r\n    // Mockea la respuesta\r\n    await new Promise((resolve) => setTimeout(resolve, 500));\r\n    return {\r\n      token: \"mocked-token-12345\",\r\n      lead_id: \"mocked-lead-id-67890\",\r\n      organization_id: process.env.REACT_APP_ORGANIZATION_ID,\r\n    };\r\n  }\r\n\r\n  // Llamada real a la API\r\n  try {\r\n    \r\n    const requestBody = {\r\n      name,\r\n      email,\r\n      organization_id: organizationId,\r\n      ...(passcode && { passcode }),\r\n    };\r\n\r\n    const response = await bffLeadClient.post('/lead_auth', requestBody);\r\n    return response.data; // Devuelve token, lead_id, organization_id\r\n  } catch (error) {\r\n    console.error(\"Error en registerUser:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const trackEvent = async (eventId, leadId, eventData = {}) => {\r\n  if (USE_MOCK_API) {\r\n    // Mockea la respuesta\r\n    await new Promise((resolve) => setTimeout(resolve, 500));\r\n    console.log(\"Evento registrado en modo mock:\", { eventId, leadId, eventData });\r\n    return {\r\n      message: \"Mocked event registered successfully\",\r\n    };\r\n  }\r\n\r\n  // Llamada real a la API\r\n  try {\r\n    const requestBody = {\r\n      event_id: eventId,\r\n      lead_id: leadId,\r\n      organization_id: organizationId,\r\n      data: eventData,\r\n    };\r\n\r\n    const response = await bffLeadClient.post('/v1/event', requestBody);\r\n    return response.data; // Devuelve la respuesta de la API\r\n  } catch (error) {\r\n    console.error(\"Error en trackEvent:\", error);\r\n    throw error;\r\n  }\r\n};\r\n  \r\nexport default bffLeadClient;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAC3CC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEFN,aAAa,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,CAAC;AAEF,MAAMK,YAAY,GAAGZ,OAAO,CAACC,GAAG,CAACY,sBAAsB,CAAC,CAAC;AACzD,MAAMC,cAAc,GAAGd,OAAO,CAACC,GAAG,CAACc,yBAAyB;AAE5D,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,GAAG,IAAI,KAAK;EAClE,IAAIP,YAAY,EAAE;IAChB;IACA,MAAM,IAAIQ,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACxD,OAAO;MACLb,KAAK,EAAE,oBAAoB;MAC3Be,OAAO,EAAE,sBAAsB;MAC/BC,eAAe,EAAExB,OAAO,CAACC,GAAG,CAACc;IAC/B,CAAC;EACH;;EAEA;EACA,IAAI;IAEF,MAAMU,WAAW,GAAG;MAClBR,IAAI;MACJC,KAAK;MACLM,eAAe,EAAEV,cAAc;MAC/B,IAAIK,QAAQ,IAAI;QAAEA;MAAS,CAAC;IAC9B,CAAC;IAED,MAAMO,QAAQ,GAAG,MAAM7B,aAAa,CAAC8B,IAAI,CAAC,YAAY,EAAEF,WAAW,CAAC;IACpE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,EAAEC,SAAS,GAAG,CAAC,CAAC,KAAK;EACnE,IAAItB,YAAY,EAAE;IAChB;IACA,MAAM,IAAIQ,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;IACxDS,OAAO,CAACK,GAAG,CAAC,iCAAiC,EAAE;MAAEH,OAAO;MAAEC,MAAM;MAAEC;IAAU,CAAC,CAAC;IAC9E,OAAO;MACLE,OAAO,EAAE;IACX,CAAC;EACH;;EAEA;EACA,IAAI;IACF,MAAMX,WAAW,GAAG;MAClBY,QAAQ,EAAEL,OAAO;MACjBT,OAAO,EAAEU,MAAM;MACfT,eAAe,EAAEV,cAAc;MAC/Bc,IAAI,EAAEM;IACR,CAAC;IAED,MAAMR,QAAQ,GAAG,MAAM7B,aAAa,CAAC8B,IAAI,CAAC,WAAW,EAAEF,WAAW,CAAC;IACnE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAehC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}